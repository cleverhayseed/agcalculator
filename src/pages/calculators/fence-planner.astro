---
import Layout from "../../layouts/Layout.astro";

const WIRE_TYPES = [
  { key: "barbed", name: "Barbed wire (1320 ft/roll)", roll: 1320, usesStrands: true,  defaultStrands: 4 },
  { key: "ht",     name: "High-tensile smooth (4000 ft/roll)", roll: 4000, usesStrands: true,  defaultStrands: 5 },
  { key: "mesh",   name: "Field/mesh fence (330 ft/roll)", roll: 330, usesStrands: false, defaultStrands: 1 },
];
---

<Layout>
  <Fragment slot="head">
    <title>Fence Planner (Perimeter, Posts, Wire) | AgCalculator</title>
    <meta name="description" content="Plan farm & homestead fence: total length, post count, wire length & rolls. Supports barbed, high-tensile, and mesh fence." />
    <link rel="canonical" href="https://agcalculator.com/calculators/fence-planner/" />

    <!-- Open Graph -->
    <meta property="og:site_name" content="AgCalculator" />
    <meta property="og:title" content="Fence Planner (Perimeter, Posts, Wire)" />
    <meta property="og:description" content="Quickly estimate fence length, posts, and wire rolls. Barbed, high-tensile, or mesh." />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://agcalculator.com/calculators/fence-planner/" />
    <meta property="og:image" content="https://agcalculator.com/og-fence-planner.png" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image:alt" content="AgCalculator — Fence Planner" />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Fence Planner (Perimeter, Posts, Wire)" />
    <meta name="twitter:description" content="Plan fence length, posts, wire length & rolls." />
    <meta name="twitter:image" content="https://agcalculator.com/og-fence-planner.png" />

    <!-- Breadcrumbs -->
    <script type="application/ld+json">
    {
      "@context":"https://schema.org",
      "@type":"BreadcrumbList",
      "itemListElement":[
        {"@type":"ListItem","position":1,"name":"Home","item":"https://agcalculator.com/"},
        {"@type":"ListItem","position":2,"name":"Fence Planner","item":"https://agcalculator.com/calculators/fence-planner/"}
      ]
    }
    </script>

    <!-- FAQ schema to reinforce helpful content -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "FAQPage",
      "mainEntity": [
        {
          "@type": "Question",
          "name": "How do you count line posts vs. corner/gate posts?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "Line posts are placed along the effective wire run at your chosen spacing. Corner posts are entered directly. Each gate adds two gate posts. Total posts = line posts + corner posts + gate posts."
          }
        },
        {
          "@type": "Question",
          "name": "Do strands apply to mesh/field fence?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "No. Mesh/field fence is treated as a single run of fabric; the strands control is disabled. For barbed or high-tensile smooth wire, strands multiplies the effective wire length."
          }
        },
        {
          "@type": "Question",
          "name": "Are material cost estimates exact?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "They are rough estimates. Roll lengths and prices vary by supplier, and field conditions may require extra posts or splices. Always check with your supplier before purchasing."
          }
        }
      ]
    }
    </script>

    <style>
      :root{--green:#2F855A;--slate:#334155;--muted:#64748b;--bg:#F8FAFC}
      *{box-sizing:border-box} body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Inter,Arial,sans-serif;background:var(--bg);color:var(--slate)}
      a{color:var(--green);text-decoration:none}
      header{padding:1rem;border-bottom:1px solid #e5e7eb;background:white}
      .wrap{max-width:960px;margin:0 auto;padding:1rem}
      fieldset{background:white;border:1px solid #e5e7eb;border-radius:12px;margin:0 0 1rem;padding:1rem}
      legend{padding:0 .4rem;color:var(--muted)}
      label{display:block;margin:.4rem 0 .2rem;font-size:.92rem}
      input,select{width:100%;padding:.6rem;border:1px solid #cbd5e1;border-radius:10px}
      .row{display:grid;gap:.8rem}
      @media(min-width:800px){.row{grid-template-columns:repeat(3,1fr)}}
      .result{background:white;border:1px solid #e5e7eb;border-radius:12px;padding:1rem}
      .note{color:#64748b;font-size:.9rem}
      .content{background:white;border:1px solid #e5e7eb;border-radius:12px;padding:1rem;margin-top:1rem}
      .content h2{margin:.2rem 0 .6rem}
      .content h3{margin:.8rem 0 .3rem}
      .content ul, .content ol{margin:.2rem 0 .2rem 1rem}
      .disclaimer{color:#64748b;margin-top:.6rem}
    </style>
  </Fragment>

  <header><div class="wrap"><a href="/">← AgCalculator</a></div></header>
  <main class="wrap">
    <h1 style="margin:.5rem 0 1rem">Fence Planner</h1>

    <fieldset>
      <legend>Fence layout</legend>
      <div class="row">
        <div>
          <label for="mode">Layout</label>
          <select id="mode">
            <option value="total">I know total fence length</option>
            <option value="rect">Rectangle: length × width</option>
          </select>
        </div>
        <div>
          <label for="corners">Corner posts (ea)</label>
          <input id="corners" type="number" step="1" value="4" />
        </div>
        <div>
          <label for="postSpacing">Line post spacing (ft)</label>
          <input id="postSpacing" type="number" step="0.1" value="8" />
        </div>
      </div>

      <div class="row" id="rectRow">
        <div>
          <label for="len">Rectangle length (ft)</label>
          <input id="len" type="number" step="0.1" placeholder="e.g. 660" />
        </div>
        <div>
          <label for="wid">Rectangle width (ft)</label>
          <input id="wid" type="number" step="0.1" placeholder="e.g. 330" />
        </div>
        <div>
          <label>&nbsp;</label>
          <div class="note">Perimeter = 2×(L+W)</div>
        </div>
      </div>

      <div class="row" id="totalRow" style="display:none">
        <div>
          <label for="totalLength">Total fence length (ft)</label>
          <input id="totalLength" type="number" step="0.1" placeholder="e.g. 1320" />
        </div>
        <div>
          <label>&nbsp;</label>
          <div class="note">Enter the whole run length</div>
        </div>
      </div>

      <div class="row">
        <div>
          <label for="wireType">Fence type</label>
          <select id="wireType">
            {WIRE_TYPES.map(w => <option value={w.key} data-roll={w.roll} data-uses={w.usesStrands ? "1" : "0"} data-defstrands={w.defaultStrands}>{w.name}</option>)}
          </select>
        </div>
        <div>
          <label for="strands">Strands</label>
          <input id="strands" type="number" step="1" value="4" />
          <div class="note" id="strandNote">Used for barbed/high-tensile only</div>
        </div>
        <div>
          <label for="rollLen">Roll length (ft)</label>
          <input id="rollLen" type="number" step="1" value="1320" />
        </div>
      </div>

      <div class="row">
        <div>
          <label for="gates">Gates (#)</label>
          <input id="gates" type="number" step="1" value="1" />
        </div>
        <div>
          <label for="gateWidth">Gate width (ft)</label>
          <input id="gateWidth" type="number" step="0.1" value="16" />
        </div>
        <div>
          <label>&nbsp;</label>
          <div class="note">Wire doesn’t span gate openings</div>
        </div>
      </div>

      <div class="row">
        <div>
          <label for="postCost">Post cost (optional)</label>
          <input id="postCost" type="number" step="0.01" placeholder="$" />
        </div>
        <div>
          <label for="rollCost">Roll cost (optional)</label>
          <input id="rollCost" type="number" step="0.01" placeholder="$" />
        </div>
        <div>
          <label>&nbsp;</label>
          <div class="note">Costs help estimate materials $</div>
        </div>
      </div>
    </fieldset>

    <section class="result" id="out">
      <div class="note">Results</div>
      <div style="display:grid;gap:.5rem;margin-top:.4rem">
        <div><strong>Total fence length:</strong> <span id="fLen">—</span> ft</div>
        <div><strong>Gate openings:</strong> <span id="gOpen">—</span> ft</div>
        <div><strong>Effective wire run:</strong> <span id="wireLen">—</span> ft</div>
        <div><strong>Line posts:</strong> <span id="linePosts">—</span></div>
        <div><strong>Corner posts:</strong> <span id="cornerPosts">—</span></div>
        <div><strong>Gate posts:</strong> <span id="gatePosts">—</span></div>
        <div><strong>Total posts:</strong> <span id="totalPosts">—</span></div>
        <div><strong>Wire rolls:</strong> <span id="rolls">—</span></div>
        <div><strong>Materials (opt):</strong> <span id="matCost">—</span></div>
      </div>
      <p class="note" style="margin-top:.6rem">Estimates only. Verify before purchasing materials or operating equipment.</p>
    </section>

    <!-- Publisher content: deeper explanations + example + mini FAQ -->
    <section class="content">
      <h2>How this calculator works</h2>
      <p>This tool estimates fence materials from your layout, post spacing, and wire type. It supports either a known total length or a rectangle (perimeter), optional gates, and strand-based fences.</p>

      <h3>Formulas</h3>
      <ul>
        <li><strong>Perimeter (rect)</strong> = 2 × (L + W)</li>
        <li><strong>Effective wire run</strong> = total length − (gates × gate width)</li>
        <li><strong>Line posts</strong> = ceil(effective run ÷ post spacing)</li>
        <li><strong>Gate posts</strong> = gates × 2</li>
        <li><strong>Total posts</strong> = line posts + corner posts + gate posts</li>
        <li><strong>Wire feet</strong> = effective run × (strands if barbed/HT else 1)</li>
        <li><strong>Wire rolls</strong> = ceil(wire feet ÷ roll length)</li>
        <li><strong>Materials cost (optional)</strong> = (total posts × post cost) + (rolls × roll cost)</li>
      </ul>

      <h3>Assumptions & notes</h3>
      <ul>
        <li>Post spacing is uniform along straight runs; corners/gates get their own posts.</li>
        <li>Mesh/field fence is treated as a single “strand” (no strands multiplier).</li>
        <li>Roll lengths are typical defaults; replace with what your supplier carries.</li>
      </ul>

      <h3>Example</h3>
      <p>Rectangle 660 ft × 330 ft, 4 corners, post spacing 8 ft, barbed 4 strands, two 16 ft gates, 1320 ft rolls:</p>
      <ol>
        <li>Perimeter = 2×(660+330) = <strong>1,980 ft</strong></li>
        <li>Gate openings = 2×16 = <strong>32 ft</strong> → Effective run = 1,980 − 32 = <strong>1,948 ft</strong></li>
        <li>Line posts = ceil(1,948 ÷ 8) = <strong>244</strong></li>
        <li>Gate posts = 2×2 = 4; Total posts = 244 + 4 corners + 4 = <strong>252</strong></li>
        <li>Wire feet = 1,948 × 4 = <strong>7,792 ft</strong> → Rolls = ceil(7,792 ÷ 1,320) = <strong>6 rolls</strong></li>
      </ol>

      <h3>FAQ</h3>
      <p><strong>How do you count line posts vs. corner/gate posts?</strong> Line posts use your spacing along the effective run. Corner posts are entered directly. Each gate adds two posts.</p>
      <p><strong>Do strands apply to mesh/field fence?</strong> No—mesh is treated as a single run (strands disabled).</p>
      <p><strong>Are material cost estimates exact?</strong> They’re estimates only; verify lengths and prices with your supplier.</p>

      <p class="disclaimer">Estimates only. Verify before purchasing materials or operating equipment.</p>
    </section>
  </main>

  <!-- Single script with inlined helpers (no imports) -->
  <script type="module">
    const $ = (id) => document.getElementById(id);
    const num = (id) => parseFloat(($(id)?.value ?? "").trim());
    const fmt = (n, d=0) => Number.isFinite(n) ? n.toLocaleString(undefined,{maximumFractionDigits:d,minimumFractionDigits:d}) : "—";
    const ceil = (n) => Math.ceil(n);
    const onInputs = (ids, handler) => ids.forEach((id)=> $(id).addEventListener("input", handler));

    const fields = ["mode","corners","postSpacing","len","wid","totalLength","wireType","strands","rollLen","gates","gateWidth","postCost","rollCost"];
    onInputs(fields, compute);
    $("wireType").addEventListener("change", onWireType);
    $("mode").addEventListener("change", onModeChange);

    function onModeChange(){
      const m = $("mode").value;
      $("rectRow").style.display  = m === "rect"  ? "" : "none";
      $("totalRow").style.display = m === "total" ? "" : "none";
      compute();
    }

    function onWireType(){
      const opt = $("wireType").selectedOptions[0];
      const uses = opt.dataset.uses === "1";
      $("strands").disabled = !uses;
      $("strands").value = uses ? (opt.dataset.defstrands || "4") : "1";
      $("strandNote").style.opacity = uses ? "1" : ".6";
      $("rollLen").value = opt.dataset.roll || "1320";
      compute();
    }

    function compute(){
      const mode = $("mode").value;
      let per = 0;
      if (mode === "rect"){
        const L = num("len"), W = num("wid");
        if(!(L>0 && W>0)) return show();
        per = 2*(L+W);
      } else {
        per = num("totalLength");
        if(!(per>0)) return show();
      }

      const corners = Math.max(0, Math.floor(num("corners") || 0));
      const postSpacing = Math.max(0.1, num("postSpacing") || 8);
      const gates = Math.max(0, Math.floor(num("gates") || 0));
      const gateWidth = Math.max(0, num("gateWidth") || 0);
      const gateOpen = gates * gateWidth;

      const effWireRun = Math.max(0, per - gateOpen);

      const linePosts = ceil(effWireRun / postSpacing);
      const gatePosts = gates * 2;
      const totalPosts = linePosts + corners + gatePosts;

      const strands = Math.max(1, Math.floor(num("strands") || 1));
      const rollLen  = Math.max(1, num("rollLen") || 1320);
      const usesStrands = !$("strands").disabled;

      const wireFeet = effWireRun * (usesStrands ? strands : 1);
      const rolls = ceil(wireFeet / rollLen);

      const postCost = num("postCost");
      const rollCost = num("rollCost");
      let matCost = NaN;
      if (postCost>0 || rollCost>0){
        const pc = (postCost>0 ? totalPosts*postCost : 0);
        const rc = (rollCost>0 ? rolls*rollCost : 0);
        matCost = pc + rc;
      }

      show({
        per, gateOpen, effWireRun,
        linePosts, corners, gatePosts, totalPosts,
        rolls, wireFeet, matCost
      });

      if (!window.__pl_fence_used) {
        window.__pl_fence_used = true;
        try { window.plausible && window.plausible("Used Fence Planner"); } catch {}
      }
    }

    function show(o={}){
      $("fLen").textContent        = fmt(o.per,0);
      $("gOpen").textContent       = fmt(o.gateOpen,0);
      $("wireLen").textContent     = fmt(o.effWireRun,0);
      $("linePosts").textContent   = fmt(o.linePosts,0);
      $("cornerPosts").textContent = fmt(o.corners,0);
      $("gatePosts").textContent   = fmt(o.gatePosts,0);
      $("totalPosts").textContent  = fmt(o.totalPosts,0);
      $("rolls").textContent       = fmt(o.rolls,0);
      $("matCost").textContent     = Number.isFinite(o.matCost) ? "$" + fmt(o.matCost,2) : "—";
    }

    onModeChange();   // init layout
    onWireType();     // init strands/roll defaults
  </script>
</Layout>
