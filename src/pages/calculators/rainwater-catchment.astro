---
import Layout from "../../layouts/Layout.astro";
---

<Layout>
  <Fragment slot="head">
    <title>Rainwater Catchment &amp; Tank Sizing Calculator | AgCalculator</title>
    <meta name="description" content="Estimate harvestable rainwater from a roof and size a storage tank for days of supply. US↔Metric toggle, rectangle/total area, and first-flush losses." />
    <link rel="canonical" href="https://agcalculator.com/calculators/rainwater-catchment/" />

    <!-- Social -->
    <meta property="og:site_name" content="AgCalculator" />
    <meta property="og:title" content="Rainwater Catchment &amp; Tank Sizing Calculator" />
    <meta property="og:description" content="Estimate gallons or liters captured and recommended tank size from roof area, rainfall, runoff coefficient, and daily demand." />
    <meta property="og:url" content="https://agcalculator.com/calculators/rainwater-catchment/" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="https://agcalculator.com/og-hay-bale.png" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />

    <!-- Structured data -->
    <script type="application/ld+json">
      {
        "@context":"https://schema.org",
        "@type":"WebApplication",
        "name":"Rainwater Catchment & Tank Sizing Calculator",
        "applicationCategory":"Calculator",
        "operatingSystem":"Web",
        "url":"https://agcalculator.com/calculators/rainwater-catchment/",
        "description":"Estimate harvestable rainwater from a roof and size a storage tank for days of supply.",
        "publisher":{"@type":"Organization","name":"AgCalculator","url":"https://agcalculator.com"},
        "offers":{"@type":"Offer","price":"0","priceCurrency":"USD"}
      }
    </script>
    <script type="application/ld+json">
      {
        "@context":"https://schema.org",
        "@type":"BreadcrumbList",
        "itemListElement":[
          {"@type":"ListItem","position":1,"name":"Home","item":"https://agcalculator.com/"},
          {"@type":"ListItem","position":2,"name":"Rainwater Catchment & Tank Sizing","item":"https://agcalculator.com/calculators/rainwater-catchment/"}
        ]
      }
    </script>
    <script type="application/ld+json">
      {
        "@context":"https://schema.org",
        "@type":"FAQPage",
        "mainEntity":[
          {
            "@type":"Question",
            "name":"What runoff coefficient should I use?",
            "acceptedAnswer":{"@type":"Answer","text":"Metal or sealed roofs often use 0.9; asphalt shingle around 0.8; concrete ~0.85–0.9; gravel/dirt 0.5–0.7. Start conservative; first-flush diverters and debris reduce yield."}
          },
          {
            "@type":"Question",
            "name":"Is rainfall 'per storm' or 'per month'?",
            "acceptedAnswer":{"@type":"Answer","text":"Enter rain depth for the period you care about (single event, month, or year). The calculator converts depth over the roof area to gallons or liters, then applies the runoff coefficient and optional first-flush."}
          },
          {
            "@type":"Question",
            "name":"How big should my tank be?",
            "acceptedAnswer":{"@type":"Answer","text":"Rule of thumb: tank size = daily demand × desired days of supply. Compare with typical harvest from a design storm or season so you don’t oversize storage."}
          }
        ]
      }
    </script>

    <!-- AdSense (publisher id) -->
    <meta name="google-adsense-account" content="ca-pub-4050846968323757" />
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4050846968323757" crossorigin="anonymous"></script>

    <style>
      :root{--green:#2F855A;--slate:#334155;--muted:#64748b;--bg:#F8FAFC}
      *{box-sizing:border-box}
      a{color:var(--green);text-decoration:none}
      header{padding:1rem;border-bottom:1px solid #e5e7eb;background:#fff}
      .wrap{max-width:960px;margin:0 auto;padding:1rem}

      fieldset{background:#fff;border:1px solid #e5e7eb;border-radius:12px;margin:0 0 1rem;padding:1rem}
      legend{padding:0 .4rem;color:var(--muted)}
      label{display:block;margin:.4rem 0 .2rem;font-size:.92rem}
      input,select{width:100%;padding:.6rem;border:1px solid #cbd5e1;border-radius:10px}
      .row{display:grid;gap:.8rem}
      @media(min-width:800px){.row{grid-template-columns:repeat(3,1fr)}}

      .result{background:#fff;border:1px solid #e5e7eb;border-radius:12px;padding:1rem}
      .note{color:var(--muted);font-size:.9rem}
      .content{background:#fff;border:1px solid #e5e7eb;border-radius:12px;padding:1rem;margin-top:1rem}
      .content h2{margin:.2rem 0 .6rem}
      .content h3{margin:.8rem 0 .3rem}
      .content ul,.content ol{margin:.2rem 0 .2rem 1rem}
      .content .disclaimer{color:#64748b;margin-top:.6rem}

      /* Units toggle — identical to Grain Bin */
      .unit-toggle{display:flex;align-items:center;gap:.4rem;margin:.5rem 0 1rem;padding:.5rem 1rem;background:#fff;border:1px solid #e2e8f0;border-radius:12px}
      .u-btn{padding:.35rem .7rem;border:1px solid #cbd5e1;border-radius:999px;background:#fff;cursor:pointer}
      .u-btn.active{background:var(--green);border-color:var(--green);color:#fff}

      .ads{margin:.75rem 0}
      .adwrap{display:block;min-height:90px}
    </style>
  </Fragment>

  <header><div class="wrap"><a href="/">← AgCalculator</a></div></header>

  <main class="wrap">
    <h1 style="margin:.5rem 0 .25rem">Rainwater Catchment &amp; Tank Sizing</h1>

    <!-- Units toggle (same component as example) -->
    <div class="unit-toggle" role="group" aria-label="Units">
      <strong style="margin-right:.25rem">Units:</strong>
      <button type="button" class="u-btn" data-units="us" aria-pressed="false">US</button>
      <button type="button" class="u-btn" data-units="metric" aria-pressed="false">Metric</button>
      <small class="note" style="margin-left:.5rem">Saved on this device</small>
    </div>

    <!-- Ad #1 (responsive) -->
    <div class="ads">
      <ins class="adsbygoogle adwrap"
           style="display:block"
           data-ad-client="ca-pub-4050846968323757"
           data-ad-slot="0000000101"
           data-ad-format="auto"
           data-full-width-responsive="true"></ins>
      <script is:inline>(window.adsbygoogle=window.adsbygoogle||[]).push({});</script>
    </div>

    <fieldset>
      <legend>Area</legend>
      <div class="row">
        <div>
          <label for="areaMode">Area input</label>
          <select id="areaMode">
            <option value="total">Total roof area</option>
            <option value="rect">Rectangle (L × W)</option>
          </select>
        </div>
        <div id="rowAreaTotal">
          <label for="area">Roof area (<span data-unit-text="ft²|m²"></span>)</label>
          <input id="area" type="number" step="0.01" placeholder="e.g. 1800" data-unit="ft2>m2" data-unit-ph="e.g. 1800|e.g. 167" />
        </div>
        <div id="rowAreaRect" style="display:none">
          <div style="display:flex;gap:.5rem">
            <div style="flex:1">
              <label for="len">Roof length (<span data-unit-text="ft|m"></span>)</label>
              <input id="len" type="number" step="0.01" placeholder="e.g. 60" data-unit="ft>m" data-unit-ph="e.g. 60|e.g. 18.3" />
            </div>
            <div style="flex:1">
              <label for="wid">Roof width (<span data-unit-text="ft|m"></span>)</label>
              <input id="wid" type="number" step="0.01" placeholder="e.g. 30" data-unit="ft>m" data-unit-ph="e.g. 30|e.g. 9.1" />
            </div>
          </div>
          <div class="note">Area = L × W</div>
        </div>
      </div>
    </fieldset>

    <fieldset>
      <legend>Rainfall, runoff &amp; demand</legend>
      <div class="row">
        <div>
          <label for="rain">Rainfall for period (<span data-unit-text="in|mm"></span>)</label>
          <input id="rain" type="number" step="0.01" placeholder="e.g. 1.2" data-unit="in>mm" data-unit-ph="e.g. 1.2|e.g. 30" />
        </div>
        <div>
          <label for="coeff">Runoff coefficient</label>
          <select id="coeff">
            <option value="0.90">Metal / sealed (0.90)</option>
            <option value="0.85">Concrete (0.85)</option>
            <option value="0.80">Asphalt shingle (0.80)</option>
            <option value="0.70">Gravel/dirt (0.70)</option>
          </select>
        </div>
        <div>
          <label for="flush">First-flush loss (optional, <span data-unit-text="gal|L"></span>)</label>
          <input id="flush" type="number" step="0.01" placeholder="e.g. 20" data-unit="gal>L" data-unit-ph="e.g. 20|e.g. 75" />
          <div class="note">Subtracts once from harvest.</div>
        </div>
      </div>

      <div class="row">
        <div>
          <label for="demand">Daily demand (<span data-unit-text="gal/day|L/day"></span>)</label>
          <input id="demand" type="number" step="0.01" placeholder="e.g. 200" data-unit="gal>L" data-unit-ph="e.g. 200|e.g. 760" />
        </div>
        <div>
          <label for="days">Desired days of supply</label>
          <input id="days" type="number" step="1" placeholder="e.g. 7" />
        </div>
        <div>
          <label for="tank">Existing tank (optional, <span data-unit-text="gal|L"></span>)</label>
          <input id="tank" type="number" step="1" placeholder="e.g. 2500" data-unit="gal>L" data-unit-ph="e.g. 2500|e.g. 9500" />
        </div>
      </div>

      <p class="note">Enter rainfall for the time window you care about (storm, month, or season). We’ll compute harvest for that period.</p>
    </fieldset>

    <section class="result">
      <div class="note">Results</div>
      <div style="display:grid;gap:.5rem;margin-top:.4rem">
        <div><strong>Harvestable water (this period):</strong> <span id="harv">—</span> <span data-unit-text="gal|L"></span></div>
        <div><strong>Suggested tank size:</strong> <span id="tankSuggest">—</span> <span data-unit-text="gal|L"></span></div>
        <div><strong>Days of supply from harvest:</strong> <span id="daysFromHarv">—</span> days</div>
        <div><strong>Days of supply from existing tank:</strong> <span id="daysFromTank">—</span> days</div>
      </div>
      <p class="note" style="margin-top:.6rem">Estimates only. First-flush, debris, and losses reduce real capture—use conservative numbers.</p>
    </section>

    <!-- Ad #2 (mid-page) -->
    <div class="ads">
      <ins class="adsbygoogle adwrap"
           style="display:block"
           data-ad-client="ca-pub-4050846968323757"
           data-ad-slot="0000000102"
           data-ad-format="auto"
           data-full-width-responsive="true"></ins>
      <script is:inline>(window.adsbygoogle=window.adsbygoogle||[]).push({});</script>
    </div>

    <section class="content" id="explain">
      <h2>How we got these numbers</h2>
      <div id="steps" class="note">Enter roof, rainfall, and demand to see the step-by-step.</div>

      <h3>Formulas</h3>
      <ul>
        <li><strong>Gross volume</strong> (US) = area(ft²) × rain(in) × 0.623</li>
        <li><strong>Gross volume</strong> (metric shortcut) = area(m²) × rain(mm) <em>(liters)</em></li>
        <li><strong>Harvestable</strong> = gross × runoff coefficient − first-flush (≥ 0)</li>
        <li><strong>Suggested tank</strong> = daily demand × desired days</li>
        <li><strong>Days from harvest</strong> = harvestable ÷ daily demand</li>
        <li><strong>Days from existing tank</strong> = tank ÷ daily demand</li>
      </ul>

      <p class="disclaimer">Prepared by AgCalculator · Estimates only · Verify with local code and water quality guidance for potable uses.</p>
    </section>
  </main>

  <!-- ===== Units helper (same pattern as Grain Bin; extended with rainwater convs) ===== -->
  <script is:inline>
    (function(){
      const KEY = 'agc_units';
      const $$ = (s) => document.querySelectorAll(s);

      // Conversions used across tools + rainwater specifics
      const conv = {
        // lengths/areas/volumes/weights from example:
        'ft>m': x => x * 0.3048,              'm>ft': x => x / 0.3048,
        'ft3>m3': x => x * 0.028316846592,    'm3>ft3': x => x / 0.028316846592,
        'lb>kg': x => x * 0.45359237,         'kg>lb': x => x / 0.45359237,
        'lb>t': x => x * 0.00045359237,       't>lb': x => x / 0.00045359237,
        'lbbu>kghl': x => x * 1.287185997,    'kghl>lbbu': x => x / 1.287185997,
        // rainwater-specific:
        'ft2>m2': x => x * 0.09290304,        'm2>ft2': x => x / 0.09290304,
        'in>mm': x => x * 25.4,               'mm>in': x => x / 25.4,
        'gal>L': x => x * 3.78541,            'L>gal': x => x / 3.78541
      };

      window.AGCUnits = {
        mode: () => localStorage.getItem(KEY) || 'us',
        setMode(m){ localStorage.setItem(KEY, m); paint(m); },
        get(el){
          const raw = parseFloat(el.value);
          if (!isFinite(raw)) return NaN;
          const map = (el.dataset.unit || '').trim();
          if (!map) return raw;
          if (this.mode() === 'us') return raw;
          const [us, met] = map.split('>');
          const fn = conv[`${met}>${us}`];
          return fn ? fn(raw) : raw;
        },
        out(usNumber, map){
          if (!isFinite(usNumber)) return NaN;
          if (this.mode() === 'us' || !map) return usNumber;
          const fn = conv[map];
          return fn ? fn(usNumber) : usNumber;
        },
        conv
      };

      function paint(mode){
        document.querySelectorAll('.unit-toggle .u-btn').forEach(btn => {
          const on = btn.dataset.units === mode;
          btn.classList.toggle('active', on);
          btn.setAttribute('aria-pressed', String(on));
        });
        $$('[data-unit-text]').forEach(el => {
          const [us, met] = el.dataset.unitText.split('|');
          el.textContent = (mode === 'metric' ? met : us);
        });
        $$('input[data-unit-ph]').forEach(el => {
          const [us, met] = el.dataset.unitPh.split('|');
          el.placeholder = (mode === 'metric' ? met : us);
        });

        // refresh calcs
        document.querySelectorAll('input,select').forEach(el => {
          el.dispatchEvent(new Event('input', {bubbles:true}));
          el.dispatchEvent(new Event('change', {bubbles:true}));
        });
      }

      document.addEventListener('click', (e) => {
        const btn = e.target.closest('.u-btn');
        if (!btn) return;
        window.AGCUnits.setMode(btn.dataset.units);
      });

      // Init (default to US, then paint saved mode)
      const initMode = window.AGCUnits.mode();
      paint(initMode);
      // Ensure one button is lit on first render
      document.querySelector(`.u-btn[data-units="${initMode}"]`)?.classList.add('active');
    })();
  </script>

  <!-- ===== Page logic ===== -->
  <script is:inline>
    const $ = (id) => document.getElementById(id);
    const num = (id) => parseFloat((($(id)?.value ?? "") + "").trim());
    const fmt0 = (n) => Number.isFinite(n) ? n.toLocaleString(undefined,{maximumFractionDigits:0}) : "—";
    const fmt1 = (n) => Number.isFinite(n) ? n.toLocaleString(undefined,{maximumFractionDigits:1}) : "—";

    // constants
    const GAL_PER_IN_FT2 = 0.623;

    // wiring
    ["areaMode","coeff"].forEach(id => $(id).addEventListener("change", onMode));
    ["area","len","wid","rain","flush","demand","days","tank"].forEach(id => $(id).addEventListener("input", compute));
    onMode(); compute();

    function onMode(){
      const m = $("areaMode").value;
      $("rowAreaTotal").style.display = m==="total" ? "" : "none";
      $("rowAreaRect").style.display  = m==="rect"  ? "" : "none";
      compute();
    }

    // helpers (normalize to US units for math)
    function areaFt2(){
      const m = $("areaMode").value;
      if (m==="total"){
        return window.AGCUnits.get($("area"));
      } else {
        const L = window.AGCUnits.get($("len"));
        const W = window.AGCUnits.get($("wid"));
        if (!(L>0 && W>0)) return NaN;
        return L * W; // feet × feet = ft² (already normalized)
      }
    }
    const rainIn   = () => window.AGCUnits.get($("rain"));
    const demandG  = () => window.AGCUnits.get($("demand"));
    const tankGal  = () => window.AGCUnits.get($("tank")) || 0;
    const flushGal = () => window.AGCUnits.get($("flush")) || 0;

    function compute(){
      const A = areaFt2();
      const R = rainIn();
      const k = parseFloat($("coeff").value);
      const d = demandG();
      const days = num("days");
      const tank = tankGal();
      const flush = flushGal();

      if(!(A>0) || !(R>=0) || !(k>0)){
        show(); steps("Enter roof, rainfall, and demand to see the step-by-step.");
        return;
      }

      const grossGal = A * R * GAL_PER_IN_FT2;
      const harvGal = Math.max(0, grossGal * k - flush);

      const tankSuggestGal = (d>0 && days>0) ? d * days : NaN;
      const daysFromHarv = (d>0) ? (harvGal / d) : NaN;
      const daysFromTank = (d>0 && tank>0) ? (tank / d) : NaN;

      // display (convert for UI when in metric)
      const metric = (window.AGCUnits.mode()==='metric');
      const harvDisp = metric ? window.AGCUnits.out(harvGal, 'gal>L') : harvGal;
      const tankSugDisp = Number.isFinite(tankSuggestGal)
        ? (metric ? window.AGCUnits.out(tankSuggestGal,'gal>L') : tankSuggestGal)
        : NaN;

      $("harv").textContent = fmt0(harvDisp);
      $("tankSuggest").textContent = fmt0(tankSugDisp);
      $("daysFromHarv").textContent = fmt1(daysFromHarv);
      $("daysFromTank").textContent = fmt1(daysFromTank);

      // steps
      const Ashow = metric ? window.AGCUnits.out(A, 'ft2>m2') : A;
      const Rshow = metric ? window.AGCUnits.out(R, 'in>mm')  : R;
      const grossShow = metric ? window.AGCUnits.out(grossGal, 'gal>L') : grossGal;
      const flushShow = metric ? window.AGCUnits.out(flush, 'gal>L')    : flush;
      const harvShow  = metric ? window.AGCUnits.out(harvGal, 'gal>L')  : harvGal;
      const uA = metric ? "m²" : "ft²";
      const uR = metric ? "mm" : "in";
      const uV = metric ? "L"  : "gal";

      steps([
        metric
          ? `Gross = area × rain (metric shortcut) = ${fmt0(Ashow)} ${uA} × ${fmt1(Rshow)} ${uR} = <strong>${fmt0(grossShow)}</strong> ${uV}`
          : `Gross = area × rain × 0.623 = ${fmt0(Ashow)} ${uA} × ${fmt1(Rshow)} ${uR} × 0.623 = <strong>${fmt0(grossShow)}</strong> ${uV}`,
        `Harvestable = gross × coeff − first-flush = ${fmt0(grossShow)} × ${k} − ${fmt0(flushShow)} = <strong>${fmt0(harvShow)}</strong> ${uV}`,
        Number.isFinite(tankSuggestGal) ? `Tank suggestion = daily × days = ${fmt0(metric?window.AGCUnits.out(d,'gal>L'):d)} ${uV}/day × ${fmt0(days)} = <strong>${fmt0(tankSugDisp)}</strong> ${uV}` : ``,
        Number.isFinite(daysFromHarv) ? `Days from harvest = ${fmt0(harvShow)} ÷ ${fmt0(metric?window.AGCUnits.out(d,'gal>L'):d)} = <strong>${fmt1(daysFromHarv)}</strong> days` : ``,
        Number.isFinite(daysFromTank) ? `Days from existing tank = ${fmt0(metric?window.AGCUnits.out(tank,'gal>L'):tank)} ÷ ${fmt0(metric?window.AGCUnits.out(d,'gal>L'):d)} = <strong>${fmt1(daysFromTank)}</strong> days` : ``
      ].filter(Boolean).join("<br/>"));
    }

    function show(){
      $("harv").textContent = "—";
      $("tankSuggest").textContent = "—";
      $("daysFromHarv").textContent = "—";
      $("daysFromTank").textContent = "—";
    }
    function steps(html){ $("steps").innerHTML = typeof html === "string" ? `<div class="note">${html}</div>` : `<div class="note">Enter inputs.</div>`; }
  </script>
</Layout>
