---
import Layout from "../../layouts/Layout.astro";
---
<Layout>
  <Fragment slot="head">
    <title>Fence Energizer Sizing (Joules & “Miles” Rating) | AgCalculator</title>
    <meta name="description" content="Estimate the output joules and marketed 'miles' (or km) rating you need for electric fence, based on length, strands, fence type, and vegetation load." />
    <link rel="canonical" href="https://agcalculator.com/calculators/fence-energizer-sizing/" />

    <!-- Open Graph -->
    <meta property="og:site_name" content="AgCalculator" />
    <meta property="og:title" content="Fence Energizer Sizing (Joules & “Miles” Rating)" />
    <meta property="og:description" content="Quickly size an energizer for electric fence with transparent, conservative rules of thumb." />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://agcalculator.com/calculators/fence-energizer-sizing/" />
    <meta property="og:image" content="https://agcalculator.com/og-fence-planner.png" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />

    <!-- Structured data -->
    <script type="application/ld+json">
    {
      "@context":"https://schema.org",
      "@type":"WebApplication",
      "name":"Fence Energizer Sizing",
      "applicationCategory":"Calculator",
      "operatingSystem":"Web",
      "url":"https://agcalculator.com/calculators/fence-energizer-sizing/",
      "description":"Estimate the output joules and marketed range you need for electric fence, based on length, strands, fence type, and vegetation load.",
      "publisher":{"@type":"Organization","name":"AgCalculator","url":"https://agcalculator.com"},
      "offers":{"@type":"Offer","price":"0","priceCurrency":"USD"}
    }
    </script>
    <script type="application/ld+json">
    {
      "@context":"https://schema.org",
      "@type":"BreadcrumbList",
      "itemListElement":[
        {"@type":"ListItem","position":1,"name":"Home","item":"https://agcalculator.com/"},
        {"@type":"ListItem","position":2,"name":"Fence Energizer Sizing","item":"https://agcalculator.com/calculators/fence-energizer-sizing/"}
      ]
    }
    </script>
    <!-- FAQ schema (matches on-page FAQ below) -->
    <script type="application/ld+json">
    {
      "@context":"https://schema.org",
      "@type":"FAQPage",
      "mainEntity":[
        {
          "@type":"Question",
          "name":"What’s the difference between stored and output joules?",
          "acceptedAnswer":{"@type":"Answer","text":"Stored joules measure energy inside the unit; output joules measure energy delivered to the fence. This calculator recommends output joules to size for real-world performance."}
        },
        {
          "@type":"Question",
          "name":"Are “miles of fence” ratings accurate?",
          "acceptedAnswer":{"@type":"Answer","text":"They are optimistic lab ratings for a clean single-wire fence. Real vegetation, multiple hot strands, and grounding reduce range. We size with margin using effective wire miles and vegetation load."}
        },
        {
          "@type":"Question",
          "name":"How important is grounding?",
          "acceptedAnswer":{"@type":"Answer","text":"Critical. Even a strong energizer underperforms with poor grounding. Use multiple long ground rods in moist soil, spaced apart and bonded with proper clamps and wire."}
        },
        {
          "@type":"Question",
          "name":"Do you support metric units?",
          "acceptedAnswer":{"@type":"Answer","text":"Yes. Use the US↔Metric toggle at the top. Internally the math runs in US length units and converts to metric for display without accuracy loss."}
        }
      ]
    }
    </script>

    <style>
      :root{--green:#2F855A;--slate:#334155;--muted:#64748b;--bg:#F8FAFC}
      *{box-sizing:border-box}
      header{padding:1rem;border-bottom:1px solid #e5e7eb;background:#fff}
      .wrap{max-width:960px;margin:0 auto;padding:1rem}
      a{color:var(--green);text-decoration:none}
      fieldset{background:#fff;border:1px solid #e5e7eb;border-radius:12px;margin:0 0 1rem;padding:1rem}
      legend{padding:0 .4rem;color:var(--muted)}
      label{display:block;margin:.4rem 0 .2rem;font-size:.92rem}
      input,select{width:100%;padding:.6rem;border:1px solid #cbd5e1;border-radius:10px}
      .row{display:grid;gap:.8rem}
      @media(min-width:800px){.row{grid-template-columns:repeat(3,1fr)}}
      .result{background:#fff;border:1px solid #e5e7eb;border-radius:12px;padding:1rem}
      .note{color:var(--muted);font-size:.9rem}
      .content{background:#fff;border:1px solid #e5e7eb;border-radius:12px;padding:1rem;margin-top:1rem}
      .content h2{margin:.2rem 0 .6rem}
      .content h3{margin:.8rem 0 .3rem}
      .content ul,.content ol{margin:.2rem 0 .2rem 1rem}
      .content .disclaimer{color:#64748b;margin-top:.6rem}
      /* Units toggle */
      .unit-toggle{display:flex;align-items:center;gap:.4rem;margin:0 0 1rem;padding:.5rem 1rem;background:#fff;border:1px solid #e2e8f0;border-radius:12px}
      .u-btn{padding:.35rem .7rem;border:1px solid #cbd5e1;border-radius:999px;background:#fff;cursor:pointer}
      .u-btn.active{background:var(--green);border-color:var(--green);color:#fff}
    </style>
  </Fragment>

  <header><div class="wrap"><a href="/">← AgCalculator</a></div></header>

  <main class="wrap">
    <h1 style="margin:.5rem 0 1rem">Fence Energizer Sizing</h1>

    <!-- Units toggle -->
    <div class="unit-toggle" role="group" aria-label="Units">
      <strong style="margin-right:.25rem">Units:</strong>
      <button type="button" class="u-btn active" data-units="us" aria-pressed="true">US</button>
      <button type="button" class="u-btn" data-units="metric" aria-pressed="false">Metric</button>
      <small class="note" style="margin-left:.5rem">Saved on this device</small>
    </div>

    <fieldset>
      <legend>Fence & conditions</legend>

      <div class="row">
        <div>
          <label for="lenMode">Length input</label>
          <select id="lenMode">
            <option value="total">I know total length</option>
            <option value="rect" selected>Rectangle: length × width</option>
          </select>
        </div>

        <div id="rowTotal" style="display:none">
          <label for="totalLen">Total fence length</label>
          <div style="display:flex;gap:.5rem">
            <input id="totalLen" type="number" step="0.1" placeholder="e.g. 1320" style="flex:1" data-unit-ph="e.g. 1320|e.g. 400" />
            <select id="unit">
              <option value="ft" id="opt-ft">ft</option>
              <option value="mi" id="opt-mi">mi</option>
            </select>
          </div>
        </div>

        <div id="rowRect">
          <label for="rectL">Rectangle (L × W, <span data-unit-text="ft|m"></span>)</label>
          <div style="display:flex;gap:.5rem">
            <input id="rectL" type="number" step="0.1" placeholder="L e.g. 660" style="flex:1" data-unit="ft>m" data-unit-ph="L e.g. 660|L e.g. 200" />
            <input id="rectW" type="number" step="0.1" placeholder="W e.g. 330" style="flex:1" data-unit="ft>m" data-unit-ph="W e.g. 330|W e.g. 100" />
          </div>
          <div class="note">Perimeter = 2×(L+W)</div>
        </div>
      </div>

      <div class="row">
        <div>
          <label for="fType">Fence type</label>
          <select id="fType">
            <option value="ht">High-tensile smooth</option>
            <option value="barbed">Barbed</option>
            <option value="mesh">Woven/mesh fence</option>
          </select>
        </div>
        <div>
          <label for="strands">Hot strands</label>
          <input id="strands" type="number" step="1" value="5" />
          <div class="note" id="strandsNote">Used for high-tensile/barbed only (mesh counts as 1)</div>
        </div>
        <div>
          <label for="veg">Vegetation load</label>
          <select id="veg">
            <option value="low">Low (well maintained)</option>
            <option value="med" selected>Medium (occasional contact)</option>
            <option value="high">High (weeds/grass contact)</option>
          </select>
        </div>
      </div>
    </fieldset>

    <section class="result">
      <div class="note">Results (rule-of-thumb)</div>
      <div style="display:grid;gap:.5rem;margin-top:.4rem">
        <div><strong>Effective wire distance:</strong> <span id="effMiles">—</span> <span data-unit-text="mi|km"></span></div>
        <div><strong>Recommended output joules:</strong> <span id="recJ">—</span> J</div>
        <div><strong>Good / Robust range:</strong> <span id="bandJ">—</span> J</div>
        <div><strong>Suggested “range” rating (marketing):</strong> <span id="milesRating">—</span> <span data-unit-text="mi|km"></span></div>
      </div>
      <p class="note" style="margin-top:.6rem">Conservative planning values. Always verify with your supplier for local conditions.</p>
    </section>

    <!-- Publisher content -->
    <section class="content" id="how-it-works">
      <h2>How this calculator works</h2>
      <p>Enter total fence length (or rectangle L×W), select fence type, number of hot strands, and vegetation load. We compute <em>effective wire distance</em>, then multiply by conservative joules-per-mile (or per km) and fence-type factors to recommend <strong>output joules</strong>. We also show a marketing-style “range” (mi/km) for comparison.</p>
      <p class="note">Rounding: distances to 2 decimals; joules to 2 decimals.</p>
    </section>

    <section class="content" id="explain">
      <h3>Rules of thumb & formulas</h3>
      <ul>
        <li><strong>Effective wire miles</strong> = physical miles × hot strands (mesh counts as 1)</li>
        <li><strong>Base output joules per mile</strong>:
          <ul>
            <li>Low vegetation: 0.6 J/mi (<span class="note">≈0.373 J/km</span>)</li>
            <li>Medium vegetation: 1.0 J/mi (<span class="note">≈0.621 J/km</span>)</li>
            <li>High vegetation: 2.0 J/mi (<span class="note">≈1.243 J/km</span>)</li>
          </ul>
        </li>
        <li><strong>Fence type factor</strong>:
          <ul>
            <li>High-tensile smooth: ×1.0</li>
            <li>Barbed: ×1.1</li>
            <li>Woven/mesh: ×1.2</li>
          </ul>
        </li>
        <li><strong>Recommended output J</strong> = effective miles × base J/mi × type factor; minimum 1.0 J</li>
        <li><strong>Good / Robust band</strong> = ±25% of recommendation</li>
        <li><strong>Suggested marketing “range”</strong> (clean single wire) ≈ J ÷ 0.6 (mi) or J ÷ 0.373 (km)</li>
      </ul>

      <h3>Worked example</h3>
      <p>Rectangle 660×330 <span data-unit-text="ft|m"></span>, high-tensile, 5 hot strands, medium vegetation:</p>
      <ol>
        <li>Perimeter = 2×(660+330) = <strong>1,980</strong> <span data-unit-text="ft|m"></span> = <strong>0.375</strong> <span data-unit-text="mi|km"></span></li>
        <li>Effective wire distance = 0.375 × 5 = <strong>1.875</strong> <span data-unit-text="mi|km"></span></li>
        <li>Base J/mi (medium) = 1.0; type factor = 1.0 → J = 1.875 × 1.0 × 1.0 = <strong>1.88 J</strong> (≥ 1.0 J min)</li>
        <li>Good/Robust ≈ 1.41–2.34 J; marketing “range” ≈ 1.88 ÷ 0.6 = <strong>3.13</strong> <span data-unit-text="mi|km"></span></li>
      </ol>

      <h3>Assumptions & notes</h3>
      <ul>
        <li>These are planning estimates. Real performance depends on grounding, insulators, joints, and actual vegetation.</li>
        <li>Predators/long runs: size toward the robust end.</li>
        <li>Solar units: derate for winter/cloud or increase panel/battery size.</li>
        <li>Mesh/woven counted as one effective hot conductor for sizing convenience.</li>
      </ul>

      <p class="disclaimer">Prepared by AgCalculator · Last updated October 27, 2025</p>
    </section>

    <section class="content" id="faq">
      <h3>FAQ</h3>

      <h4>What’s the difference between stored and output joules?</h4>
      <p>Stored joules are inside the unit; output joules are delivered to the fence. We size using <em>output</em> joules for clarity.</p>

      <h4>Are “miles of fence” ratings accurate?</h4>
      <p>They’re optimistic for clean single-wire setups. Real-world vegetation, multiple strands, and grounding reduce range — size with margin.</p>

      <h4>How important is grounding?</h4>
      <p>Critical. Use multiple long ground rods in moist soil, spaced and bonded properly.</p>

      <h4>Do you support metric?</h4>
      <p>Yes — use the toggle at the top. The math normalizes to US length units and converts for display.</p>
    </section>

    <section class="content" id="related">
      <h3>Also try…</h3>
      <ul>
        <li><a href="/calculators/fence-planner/">Fence Planner (Perimeter, Posts, Wire)</a></li>
        <li><a href="/calculators/pasture-stocking/">Pasture Stocking Planner (Head/Acre)</a></li>
      </ul>
    </section>

    <!-- ===== Units helper (page-local) ===== -->
    <script is:inline>
      (function () {
        const KEY = 'agc_units';
        const $$ = (s) => document.querySelectorAll(s);

        const conv = {
          'ft>m': x => x * 0.3048,        'm>ft': x => x / 0.3048,
          'mi>km': x => x * 1.609344,     'km>mi': x => x / 1.609344
        };

        window.AGCUnits = {
          mode: () => localStorage.getItem(KEY) || 'us',
          setMode(m){ localStorage.setItem(KEY, m); paint(m); },
          get(el){ // normalize to US units for math
            const raw = parseFloat(el.value);
            if (!isFinite(raw)) return NaN;
            const map = (el.dataset.unit || '').trim();
            if (!map) return raw;
            const [us, metric] = map.split('>');
            if (this.mode() === 'us') return raw;
            const fn = conv[`${metric}>${us}`];
            return fn ? fn(raw) : raw;
          },
          outMiles(mi){ return this.mode()==='metric' ? conv['mi>km'](mi) : mi; },
          unitTextMiles(){ return this.mode()==='metric' ? 'km' : 'mi'; },
          unitTextFeet(){ return this.mode()==='metric' ? 'm' : 'ft'; },
          baseJperDistance(jPerMi){ return this.mode()==='metric' ? jPerMi / 1.609344 : jPerMi; }
        };

        function paint(mode){
          document.querySelectorAll('.unit-toggle .u-btn').forEach(btn => {
            const on = btn.dataset.units === mode;
            btn.classList.toggle('active', on);
            btn.setAttribute('aria-pressed', String(on));
          });

          // Swap UI labels/placeholders/unit text
          $$('[data-unit-label]').forEach(el => {
            const [us, met] = el.dataset.unitLabel.split('|');
            el.textContent = (mode === 'metric' ? met : us);
          });
          $$('input[data-unit-ph]').forEach(el => {
            const [us, met] = el.dataset.unitPh.split('|');
            el.placeholder = (mode === 'metric' ? met : us);
          });
          $$('[data-unit-text]').forEach(el => {
            const [us, met] = el.dataset.unitText.split('|');
            el.textContent = (mode === 'metric' ? met : us);
          });

          // Update the "ft/mi" selector option text
          const optFt = document.getElementById('opt-ft');
          const optMi = document.getElementById('opt-mi');
          if (optFt && optMi) {
            optFt.textContent = (mode === 'metric') ? 'm' : 'ft';
            optMi.textContent = (mode === 'metric') ? 'km' : 'mi';
          }

          // Trigger recalculation
          document.querySelectorAll('input,select').forEach(el => {
            el.dispatchEvent(new Event('input', {bubbles:true}));
            el.dispatchEvent(new Event('change', {bubbles:true}));
          });
        }

        document.addEventListener('click', (e) => {
          const btn = e.target.closest('.u-btn');
          if (!btn) return;
          window.AGCUnits.setMode(btn.dataset.units);
        });

        // Initialize
        paint(window.AGCUnits.mode());
      })();
    </script>

    <!-- ===== Calculator logic (page-local) ===== -->
    <script is:inline>
      const $ = (id) => document.getElementById(id);
      const fmt2 = (n) => Number.isFinite(n) ? n.toLocaleString(undefined,{maximumFractionDigits:2}) : "—";

      const fields = ["lenMode","totalLen","unit","rectL","rectW","fType","strands","veg"];
      fields.forEach(id => $(id).addEventListener("input", compute));
      $("lenMode").addEventListener("change", onLenMode);
      $("fType").addEventListener("change", onFenceType);

      function onLenMode(){
        const m = $("lenMode").value;
        $("rowTotal").style.display = m==="total" ? "" : "none";
        $("rowRect").style.display  = m==="rect"  ? "" : "none";
        compute();
      }
      function onFenceType(){
        const mesh = $("fType").value === "mesh";
        $("strands").disabled = mesh;
        $("strandsNote").style.opacity = mesh ? ".6" : "1";
        if (mesh) $("strands").value = "1";
        compute();
      }

      function milesFromInputs(){
        if ($("lenMode").value === "total"){
          const L = parseFloat($("totalLen").value);
          if (!(L>0)) return NaN;
          // In metric mode, the dropdown displays m/km but values remain 'ft'/'mi'
          const u = $("unit").value; // 'ft' or 'mi'
          const metric = (window.AGCUnits.mode() === 'metric');
          if (u === 'mi'){
            return metric ? (L / 1.609344) : L; // km -> mi OR mi -> mi
          } else { // 'ft'
            return metric ? (L / 1609.344) : (L / 5280); // m -> mi OR ft -> mi
          }
        } else {
          // Rectangle: read L & W normalized to feet (US), then to miles
          const Lft = window.AGCUnits.get($("rectL"));
          const Wft = window.AGCUnits.get($("rectW"));
          if (!(Lft>0) || !(Wft>0)) return NaN;
          const perFt = 2*(Lft+Wft);
          return perFt/5280;
        }
      }

      function vegJperMi(){
        const v = $("veg").value;
        if (v==="low") return 0.6;
        if (v==="high") return 2.0;
        return 1.0; // medium
      }
      function typeFactor(){
        const t = $("fType").value;
        if (t==="barbed") return 1.1;
        if (t==="mesh") return 1.2;
        return 1.0; // high-tensile
      }

      function compute(){
        const miles = milesFromInputs(); // physical miles
        if (!Number.isFinite(miles) || !(miles>0)){
          show(); document.getElementById("steps").innerHTML = `<span class="note">Enter fence length to see the step-by-step.</span>`; return;
        }

        const mesh = $("fType").value === "mesh";
        const strands = mesh ? 1 : Math.max(1, Math.floor(parseFloat($("strands").value) || 1));

        const effMiles = miles * strands; // effective miles
        const baseJpm = vegJperMi();
        const tFac = typeFactor();

        let recJ = effMiles * baseJpm * tFac;
        recJ = Math.max(recJ, 1.0); // minimum recommended output J
        const bandLo = recJ * 0.75;
        const bandHi = recJ * 1.25;

        // Marketing range rating: clean, single-wire lab eq.
        const marketingMi = recJ / 0.6;                     // miles
        const marketingKm = recJ / (0.6 / 1.609344);        // km (0.373 J/km)

        // Build steps with current unit system
        const mode = window.AGCUnits.mode();
        const distLabel = mode==='metric' ? 'km' : 'mi';
        const effDistDisplay = mode==='metric' ? window.AGCUnits.outMiles(effMiles) : effMiles;
        const physDistDisplay = mode==='metric' ? window.AGCUnits.outMiles(miles) : miles;
        const baseJperUnit = window.AGCUnits.baseJperDistance(baseJpm);

        const lines = [];
        lines.push(`<div>Physical distance = <strong>${fmt2(physDistDisplay)}</strong> ${distLabel}</div>`);
        lines.push(`<div>Effective wire distance = ${fmt2(physDistDisplay)} × ${strands} = <strong>${fmt2(effDistDisplay)}</strong> ${distLabel}</div>`);
        lines.push(`<div>Base J/${distLabel} (veg) = <strong>${fmt2(baseJperUnit)}</strong>; fence type factor = <strong>${fmt2(tFac)}</strong></div>`);
        lines.push(`<div>Recommended J = ${fmt2(effMiles)} mi × ${fmt2(baseJpm)} J/mi × ${fmt2(tFac)} = <strong>${fmt2(recJ)}</strong> J (≥ 1.0 J)</div>`);
        lines.push(`<div>Good/Robust range ≈ <strong>${fmt2(bandLo)}</strong>–<strong>${fmt2(bandHi)}</strong> J</div>`);
        const mkt = mode==='metric' ? `${fmt2(marketingKm)} km` : `${fmt2(marketingMi)} mi`;
        lines.push(`<div>Suggested clean-wire “range” ≈ ${mkt}</div>`);
        document.getElementById("steps").innerHTML = `<div style="display:grid;gap:.35rem">${lines.join("")}</div>`;

        show({effMiles, recJ, bandLo, bandHi, marketingMi, marketingKm});
      }

      function show(o={}){
        const mode = window.AGCUnits.mode();
        const effDisplay = mode==='metric' ? window.AGCUnits.outMiles(o.effMiles) : o.effMiles;
        const mktDisplay = mode==='metric' ? o.marketingKm : o.marketingMi;

        document.getElementById("effMiles").textContent = fmt2(effDisplay);
        document.getElementById("recJ").textContent     = fmt2(o.recJ);
        document.getElementById("bandJ").textContent    = (Number.isFinite(o.bandLo)&&Number.isFinite(o.bandHi)) ? `${fmt2(o.bandLo)}–${fmt2(o.bandHi)}` : "—";
        document.getElementById("milesRating").textContent = fmt2(mktDisplay);
      }

      // init
      onLenMode();
      onFenceType();
      compute();
    </script>
  </main>
</Layout>
